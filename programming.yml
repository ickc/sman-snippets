c:style:
  do: exec
  command: find .
    -type f
    \(
      -iname "*.c" -o
      -iname "*.cpp" -o
      -iname "*.h" -o
      -iname "*.cu" -o
      -iname "*.upc"
    \) -exec clang-format -i -style=WebKit {} \+

python:snakeviz:
  do: exec
  command: BROWSER=echo snakeviz program.prof

python:coverage:
  do: exec
  command: coverage run --branch --parallel-mode <<script>>

python:rm:weave:
  do: exec
  desc: remove scipy weave's cache
  command: rm -rf ~/.cache/weave/; [[ -n "${XDG_CACHE_HOME+x}" ]] && rm -rf $XDG_CACHE_HOME/weave/

python:autopep8:
  do: exec
  command: autopep8 <<path>> --recursive --in-place --pep8-passes 2000 --verbose <<option( , --aggressive --aggressive)>> --ignore E501,E265

python:isort:
  do: exec
  desc: sort all import statements
  command: isort --recursive .

fd:rm:ipycp:
  do: exec
  desc: find and remove all .ipynb_checkpoints
  command: find . -type d -name '.ipynb_checkpoints' -exec rm -rf {} +

fd:rm:py:aux:
  do: exec
  desc: remove python's auxiliary files
  command: find .
    \(
      -type f
      \(
        -name '*.py[co]' -o
        -name .dmypy.json -o
        -name .coverage -o
        -name coverage.xml -o
        -name coverage.lcov
      \) -o
      -type d
      \(
        -name htmlcov -o
        -name __pycache__ -o
        -name '*.egg-info' -o
        -name '*.eggs' -o
        -name .mypy_cache -o
        -name .pytest_cache -o
        -name .ipynb_checkpoints
      \)
    \) -exec rm -rf {} +

fd:rm:worker:cache:
  do: exec
  desc: remove dask, parsl worker cache directories
  command: find .
    -type d
    \(
      -name dask-worker-space -o
      -name runinfo
    \) -exec rm -rf {} +

fd:rm:tex:aux:
  do: exec
  desc: remove LaTeX's auxiliary files, extensions that is not known to collide with other applications only, this excludes .out, .bib, .log, 
  command: find .
    -type f
    \(
      -name '*.aux' -o
      -name '*.bbl' -o
      -name '*.bcf' -o
      -name '*.blg' -o
      -name '*.fdb_latexmk' -o
      -name '*.fls' -o
      -name '*.toc' -o
      -name '*.xdv'
    \) -delete

fd:rm:idea:
  do: exec
  desc: remove .idea directories by Jetbrains
  command: find .
    -type d
    -name .idea
    -exec rm -rf {} +

fd:rm:stack:cache:
  do: exec
  desc: remove stack's cache
  command: find .
    \(
    -type f
    -name stack.yaml.lock -o
    -type d
    -name .stack-work
    \) -exec rm -rf {} +

fd:rm:node:cache:
  do: exec
  desc: remove node's cache and vscode package (.vsix)
  command: find .
    \(
      -type f
      \(
        -name package-lock.json -o
        -name '*.vsix'
      \)
      -type d
      -name node_modules
    \) -exec rm -rf {} +

fd:ipynb:clear:
  do: exec
  cesc: find all ipynb and clear output cells
  command: find . \! -path '*/.ipynb_checkpoints/*' -name '*.ipynb' -exec jupyter nbconvert --ClearOutputPreprocessor.enabled=True --inplace {} +

fd:jupytext:format:
  do: exec
  desc: format ipynb files
  command: find . \! -path '*/.ipynb_checkpoints/*' -name '*.ipynb' -exec jupytext <<sync( ,--sync)>> --pipe black --pipe 'isort - --treat-comment-as-code "# %%" --float-to-top' {} +

jupyter:nb:
  do: exec
  command: jupyter notebook --no-browser --port=8989

ipcluster:
  do: exec
  command: ipcluster start -n <<processes>> --engines=MPIEngineSetLauncher

fd:import:
  do: exec
  desc: Find .py recursively, and attempt to get all the modules imported in them. 1st look for import, 2nd look for from ... import. c.f. https://unix.stackexchange.com/a/13472
  command: |
    {
      find . \! -path '*/.git/*' -type f -name '*.py' -exec grep --color=auto -ohP '^ *import \K[^ ]*' {} +
      find . \! -path '*/.git/*' -type f -name '*.py' -exec grep --color=auto -ohP '^ *from \K[^ ]*(?= import)' {} +
    } | sort -u
# TeX
tex:doc:
  do: exec
  desc: cd to TeXLive's documentation directory
  command: cd /usr/local/texlive/*/texmf-dist/doc/

ipy:ex:
  do: exec
  desc: execute Jupyter Notebook
  command: jupyter-nbconvert --ExecutePreprocessor.timeout=-1 --execute <<filename>>

# open Jupyter
jupyter:start:
  do: exec
  desc: start Jupyter
  command: '"/Applications/<<chrome(Chromium,Google Chrome,Google Chrome Canary)>>.app/Contents/MacOS/<<chrome>>" -incognito --app=<<address(https://192.168.4.5:8000,https://192.168.4.7:8000,https://192.168.4.8:8000,https://172.22.2.7:8000,https://jupyter.nersc.gov/user/khcheung/cori-shared-node-cpu/lab,https://jupyter.nersc.gov/user/khcheung/perlmutter-shared-node-cpu/)#1: 3650-local, 2: lpc-local, 3: server-local, 4: lpc, 5: NERSC>>'
jupyter:start:local:
  do: exec
  desc: start Jupyter by running a local server
  command: conda activate jupyterlab && jupyter lab
jupyter:start:hub:
  do: exec
  desc: start Jupyter labhub
  command: conda activate jupyterlab && jupyterhub -f=~/.jupyter/jupyterhub_config.py
pandoc:rst:
  do: exec
  desc: find all rst within current directory and build using pandoc. Ordering is random. Useful to build documentations with "hidden" files not included in their Sphinx build.
  command: find \( -name '*.txt' -o -name '*.rst' \) -exec pandoc -s -f rst -o <<filename>> {} +

# linting
lint:flake8:c:
  do: exec
  desc: flake8, C error only. "Function is too complex"
  command: flake8 --select C .
lint:flake8:e:
  do: exec
  desc: flake8, E error only. "Error"
  command: flake8 --select E .
lint:flake8:f:
  do: exec
  desc: flake8, F error only. From pyflakes
  command: flake8 --select F .
lint:flake8:w:
  do: exec
  desc: flake8, W error only "Warning"
  command: flake8 --select W .
lint:bandit:b:
  do: exec
  desc: use bandit to check security
  command: bandit --recursive .
lint:bandit:html:
  do: exec
  desc: use bandit to check security
  command: bandit --recursive --format html -o bandit.html .
lint:mypy:
  do: exec
  desc: use mypy to type check
  command: MYPYPATH="$PYTHONPATH" mypy --follow-imports=silent .
python:format:
  do: exec
  desc: format python files
  command: autoflake --in-place --recursive --expand-star-imports --remove-all-unused-imports --ignore-init-module-imports --remove-duplicate-keys --remove-unused-variables .; black .; isort .
mypy:stop:
  do: exec
  desc: stop all mypy daemons
  command: (conda activate all310-conda-forge && find ~/git -name .dmypy.json -exec bash -c 'cd "${1%/*}" && dmypy stop' bash {} \;)
