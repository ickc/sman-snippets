module:gnu:
  do: exec
  command: module swap PrgEnv-intel PrgEnv-gnu
module:intel:
  do: exec
  command: module swap PrgEnv-gnu PrgEnv-intel
module:py2:
  do: exec
  command: module load python/2.7-anaconda-4.4
module:py3:
  do: exec
  command: module load python/3.6-anaconda-4.4
module:cuda:
  do: exec
  command: module load cuda
squeue:sqs:o:
  do: exec
  desc: squeue sqs
  command:
    partition='<<partition(-M escori -p bigmem, )>>';
    <<watch(watch -n 15,bash -c)>>
    'squeue
    -o "%16i %2t %9u %12j  %5D %.10l %.10M  %20V %15q %20S %14f %15R"
    <<partition>>
    <<me(--me, )>>'
squeue:sqs:O:
  do: exec
  desc: squeue sqs
  command:
    partition='<<partition(-M escori -p bigmem, )>>';
    <<watch(watch -n 15,bash -c)>>
    'squeue
    -O "JobID:17,StateCompact:3,UserName:10,Name:25,NumNodes:6,TimeLimit:.11,TimeUsed:.11,SubmitTime:21,QOS:16,StartTime:21,Feature:15,ReasonList:16"
    <<partition>>
    <<me(--me, )>>'
squeue:sqs:python:
  do: exec
  desc: squeue sqs formatted by Pandas.
  command:
    (
      conda activate common-20210519-all3-defaults-cray;
      partition='<<partition(-M escori -p bigmem, )>>';
      <<watch(watch -n 15,bash -c)>>
      '~/git/source/dautil-py/bin/squeue.py
      <<partition>>
      <<me(--me, )>>'
    )
squeue:cmem:o:
  do: exec
  desc: squeue sqs for cmem
  command: (module load cmem; s r squeue:sqs:o -- '-p cmem')
squeue:cmem:O:
  do: exec
  desc: squeue sqs for cmem
  command: (module load cmem; s r squeue:sqs:O -- '-p cmem')
squeue:cmem:python:
  do: exec
  desc: squeue sqs for cmem
  command: (module load cmem; s r squeue:sqs:python3 -- '-p cmem')
BB:salloc:
  do: exec
  desc: salloc with BB at pb1_lp2_high_0_2
  command: salloc -N 1 -C haswell -p debug -t 00:30:00 --bbf="/global/cscratch1/sd/khcheung/POLARBEAR/ickc-logs/jobs/pb1_lp2_high_0_2/BB.conf"
BB:cd:
  do: exec
  desc: cd to pb1_lp2_high_0_2 at BB (assume in compute node)
  command: cd $DW_PERSISTENT_STRIPED_pb1_lp2_high_0_2

sbatch:
  do: exec
  desc: sbatch in parallel
  command: find . -name '*.sh' | sort | xargs -i -n1 -P30 bash -c 'sbatch $0; sleep 5' {}

tail:stdout:
  do: exec
  desc: tail and follow stdout/stderr files
  command: tail -n 100 -f <<prefix>><<jobid>>.out <<prefix>><<jobid>>.err

condor:status:constraint:all:
  do: exec
  desc: condor_status with constraint, all at once
  command: sudo condor_status -constraint '
    (machine == "wn1905340.in.tier2.hep.manchester.ac.uk") ||
    (machine == "wn5914090.in.tier2.hep.manchester.ac.uk") ||
    (machine == "wn5916090.in.tier2.hep.manchester.ac.uk") ||
    (machine == "wn5916340.in.tier2.hep.manchester.ac.uk") ||
    (machine == "wn5914340.in.tier2.hep.manchester.ac.uk") ||
    (machine == "wn5917090.in.tier2.hep.manchester.ac.uk")'

condor:status:constraint:each:
  do: exec
  desc: condor_status with constraint, each individually
  command: |
    for i in \
      wn1905340 \
      wn5914090 \
      wn5916090 \
      wn5916340 \
      wn5914340 \
      wn5917090
    do
      printf '=== %s =================================================================================\n' $i
      sudo condor_status -constraint "(machine == \"$i.in.tier2.hep.manchester.ac.uk\")"
    done

pkcs12:split:cert:
  do: exec
  desc: split a PKCS 12 bundle into a certificate and a key. Import password needed.
  command: openssl pkcs12 -in <<certBundle>>.p12 -clcerts -nokeys -out <<cert>>.pem
pkcs12:split:key:
  do: exec
  desc: split a PKCS 12 bundle into a certificate and a key. Import password needed. New PEM pass phrase needed.
  command: openssl pkcs12 -in <<certBundle>>.p12 -nocerts  -out <<key>>.pem
