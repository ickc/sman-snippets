logifix:
  do: exec
  desc: Fix Logitech's software update
  command: rm -f /Library/Application\ Support/Logitech.localized/Logitech\ Options.localized/Updates/PendingUpdates.xml
kext:
  do: exec
  desc: list loaded 3rd party kexts
  command: kextstat | grep -v com.apple | sort -bk 6
log:sleep:
  do: exec
  desc: grep the log for wake reasons
  command: pmset -g log | grep -iEe "(Wake|Sleep).*due to"
restart:
  do: exec
  desc: restart macOS without asking for FileVault decryption again
  command: sudo fdesetup authrestart
default:show:hidden:
  do: exec
  desc: show hidden files in macOS Finder
  command: defaults write com.apple.Finder AppleShowAllFiles true && killall Finder
list:metadata:
  do: exec
  desc: list all metadata of a file in macOS
  command: mdls "<<file>>"
list:xattr:
  do: exec
  desc: list all xattr of a file in macOS
  command: xattr -l "<<file>>"
list:shared:by:me:
  do: exec
  desc: list all iCloud files that is "Shared by Me"
  command: mdfind -onlyin "<<dir($HOME/Library/Mobile Documents/)>>" 'kMDItemIsShared == 1'
check:default:content:type:
  do: exec
  desc: check macOS file content type. May need to double-click file once first to resolve content type if it starts with dyn
  command: mdls -name kMDItemContentType <<file>>
default:open:
  do: exec
  desc: default opening plain-text by vscode. Hint—add more types by checking file with check:content:type.
  command: ~/git/source/bootstrapping-os-environments/macOS/default-open.sh
default:show:
  do: exec
  desc: show default handlers for different UTIs and extensions
  command: defaults read com.apple.LaunchServices/com.apple.launchservices.secure LSHandlers
default:reload:
  do: exec
  desc: rebuild Launch Services Database. See https://discussions.apple.com/thread/7913794
  command: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -kill -r -domain u -domain s -domain l -va
ibooks:path:
  do: exec
  desc: go to iBooks PDF location
  command: cd "$HOME/Library/Mobile Documents/iCloud~com~apple~iBooks/Documents"
disable:python:alert:
  do: exec
  desc: Disable Python 2 deprecation alert. See https://github.com/microsoft/vscode/issues/134635#issuecomment-952669199
  command: defaults write com.apple.python DisablePythonAlert True
disable:indexing:
  do: exec
  desc: Indexing and searching disabled for the drive. See https://apple.stackexchange.com/a/418176/355318
  command: sudo mdutil -i off -d '/Volumes/<<name>>'; <<sudo( ,sudo)>> touch '/Volumes/<<name>>/.metadata_never_index'; <<sudo>> rm -rf '/Volumes/<<name>>/.fseventsd' '/Volumes/<<name>>/.Spotlight-V100'
delete:spotlight:
  do: exec
  desc: delete all .Spotlight-V100 & .fseventsd recursively, useful when rsync'd from external drives with these files accidentally.
  command: find \( -name .Spotlight-V100 -o -name .fseventsd \) -exec rm -rf {} +
identify:dynamic:desktop:
  do: exec
  desc: identify how many frames are in dynamic desktop. See https://stackoverflow.com/a/4410103 for the padding technique. Note — nameLength is calculated using wc -L for unicode support.
  command: (
    export padlength=<<padlength(60)>>;
    padlimit=$COLUMNS;
    pad=$(printf '%*s' "$padlimit");
    export pad=${pad// /-};
    find -iname '*.heic'
    -exec bash -c '
      count=$(identify "$0" | wc -l);
      nameLength=$(echo "$0" | wc -L);
      printf "%s %*.*s %sx%s\n" "$0" 0 $((padlength - $nameLength - ${#count} )) "$pad" "$count" "$(exiftool -ImageSize "$0" | cut -d':' -f 2)"
    ' {} \;
    )
application:stat:plain:
  do: exec
  desc: |
    statistics of application arch-kind.
  command: |
    system_profiler SPApplicationsDataType | grep 'Kind: ' | sort | uniq -c | sort -n
application:stat:json:
  do: exec
  desc: |
    statistics of application arch-kind, using json format.
  command: system_profiler -json SPApplicationsDataType | grep '"arch_kind"' | sort | uniq -c | sort -n
application:stat:xml:
  do: exec
  desc: |
    statistics of application arch-kind, using xml format. Note: json format is better, as '-A 1' is used in xml format.
  command: system_profiler -xml SPApplicationsDataType | grep -A 1 '<key>arch_kind</key>' | sort | uniq -c | sort -n
diskutil:list:
  do: exec
  desc: list all disks.
  command: diskutil list
diskutil:partition:disk:
  do: exec
  desc: format disk.
  command: diskutil partitionDisk '/dev/disk<<N>>' GPT JHFS+ '<<name>>' 100%
format:disk:
  do: exec
  desc: format disks.
  command: s r diskutil:list; s r diskutil:partition:disk
zerotier:restart:
  do: exec
  desc: restart zerotier one on macOS
  command: sudo launchctl stop /Library/LaunchDaemons/com.zerotier.one.plist && sudo launchctl start /Library/LaunchDaemons/com.zerotier.one.plist
erase:fat:
  do: exec
  desc: erase disk in FAT format
  command: diskutil unmountDisk /dev/disk<<N>>; diskutil eraseDisk FAT32 <<name>> MBRFormat /dev/disk<<N>>
mac:clean:
  do: exec
  desc: clean macOS caches
  command: rm -rf ~/Library/Caches/; mkdir -p ~/Library/Caches/
