# package managers #####################################################################################################

# command that does a full distro upgrade should not be provided unless it is very standard without manual intervention
# standard commands
# - search: search for packages
# - provide: check what package provides this executables
# - info: get info about a package
# - require: list dependencies of a package
# - whatrequire: list reverse dependencies of a package
# - install: install packages
# - remove: uninstall packages
# - remove:orphan: remove orphan packages
# - ls: list all user-installed packages
# - ls:all: list all installed packages
# - ls:available: list all available packages
# - ls:repo: list all enabled repos  # pacman has no such concept
# - update: update a package  # pacman has no such concept
# - update:all: update all packages
# - clean: clean cache

# see https://wiki.archlinux.org/title/Pacman/Rosetta

# SUSE ################################################################################################################
suse:search:
  do: exec
  desc: search for packages on SUSE
  command: zypper search <<package>>

suse:provide:
  do: exec
  desc: check what package provides this executables
  command: zypper what-provides <<executable>>

suse:info:
  do: exec
  desc: get info about a package
  command: zypper info <<package>>

suse:require:
  do: exec
  desc: list dependencies of a package
  command: zypper info --requires <<package>>

suse:install:
  do: exec
  desc: install packages on SUSE
  command: sudo transactional-update pkg install <<package>>

suse:remove:
  do: exec
  desc: uninstall packages on SUSE
  command: sudo transactional-update pkg remove <<package>>

suse:ls:all:
  do: exec
  desc: list all installed packages on SUSE
  command: zypper se --installed-only

suse:ls:available:
  do: exec
  desc: list all available packages
  command: zypper se

suse:ls:repo:
  do: exec
  desc: list all enabled repos
  command: zypper lr

suse:update:all:
  do: exec
  desc: update packages on SUSE
  command: sudo transactional-update up

suse:clean:
  do: exec
  desc: clean cache
  command: sudo transactional-update cleanup

# SUSE specific

suse:command-not-found:
  do: exec
  desc: lookup the package that contains it
  command: cnf <<command>>

# RHEL ################################################################################################################

rhel:search:
  do: exec
  desc: search for packages on RHEL
  command: dnf search <<package>>
rhel:provide:
  do: exec
  desc: check what package provides this executables
  command: dnf provides <<executable>>
rhel:info:
  do: exec
  desc: get info about a package
  command: dnf info <<package>>
rhel:require:
  do: exec
  desc: list dependencies of a package
  command: dnf repoquery --requires <<package>>
rhel:whatrequire:
  do: exec
  desc: list reverse dependencies of a package
  command: dnf repoquery --alldeps --whatrequires <<package>>
rhel:install:
  do: exec
  desc: install packages on RHEL
  command: sudo dnf install <<package>>
rhel:remove:
  do: exec
  desc: uninstall packages on RHEL
  command: sudo dnf remove <<package>>
rhel:remove:orphan:
  do: exec
  desc: remove orphan packages on RHEL
  command: sudo dnf autoremove
rhel:ls:
  do: exec
  desc: list user installed packages on RHEL
  command: dnf history userinstalled
rhel:ls:all:
  do: exec
  desc: list all installed packages on RHEL
  command: dnf list installed
rhel:ls:available:
  do: exec
  desc: list all available packages
  command: dnf list available
rhel:ls:repo:
  do: exec
  desc: list all enabled repos
  command: dnf repolist
rhel:update:
  do: exec
  desc: update a package on RHEL
  command: sudo dnf update <<package>>
rhel:update:all:
  do: exec
  desc: update packages on RHEL
  command: sudo dnf upgrade --refresh
rhel:clean:
  do: exec
  desc: Performs cleanup of temporary files kept for repositories. This includes any such data left behind from disabled or removed repositories as well as for different distribution release versions.
  command: sudo dnf clean all

# RHEL specific

rhel:ls:subscription:
  do: exec
  desc: check if valid RHEL subscription exists
  command: sudo subscription-manager list --installed

# arch #################################################################################################################

arch:search:
  do: exec
  desc: search package (ERE supported)
  command: yay -Ss '<<package>>'
arch:provide:
  do: exec
  desc: check what package provides this executables
  command: yay -Fy && yay -F '<<executable>>'
arch:info:
  do: exec
  desc: get info about a package
  command: yay -Si '<<package>>'
arch:require:
  do: exec
  desc: list dependencies of a package
  command: yay -Si '<<package>>'
arch:whatrequire:
  do: exec
  desc: list reverse dependencies of a package
  command: yay -Sii '<<package>>'
arch:install:
  do: exec
  desc: install packages
  command: yay -S '<<package>>'
arch:remove:
  do: exec
  desc: remove a package using yay
  command: yay -Rs '<<package>>'
arch:remove:orphan:
  do: exec
  desc: removing orphans and their configuration files (run this recursively until none)
  command: yay -Rns $(yay -Qtdq)
arch:ls:
  do: exec
  desc: List all explicitly installed packages
  command: pacman -Qe
arch:ls:all:
  do: exec
  desc: List all installed packages
  command: yay -Q
arch:ls:available:
  do: exec
  desc: List all available packages
  command: yay -Sl
arch:update:all:
  do: exec
  desc: yay upgrade all
  command: |
    yay --sync --refresh --sysupgrade \
      --nomakepkgconf \
      --sudoloop \
      --answerclean None \
      --answerdiff None \
      --answeredit None \
      --answerupgrade None \
      --noremovemake \
      --norebuild \
      --noredownload
aarch:clean:
  do: exec
  desc: remove all but 1 past version of cache of installed packages
  command: sudo pacman -Sc && paccache --remove --keep 1

# Arch specific

arch:refresh:mirror:
  do: exec
  desc: refresh pacman mirror list
  command: command -v rate-mirrors >/dev/null 2>&1 && bash -c 'rate-mirrors arch | sudo tee /etc/pacman.d/mirrorlist'
arch:refresh:update:all:
  do: exec
  desc: refresh pacman mirror list and then upgrade
  command: |
    s r arch:refresh:mirror && s r arch:update:all

arch:ls:local:
  do: exec
  desc: List all foreign packages (typically manually downloaded and installed or packages removed from the repositories a.k.a. AUR)
  command: pacman -Qm
arch:ls:native:
  do: exec
  desc: List all explicitly installed native packages (i.e. present in the sync database) that are not direct or optional dependencies
  command: pacman -Qent
arch:ls:native:all:
  do: exec
  desc: List all native packages (installed from the sync database)
  command: pacman -Qn
arch:ls:all:date:
  do: exec
  desc: List installed packages by date
  command: expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort

# apt ##################################################################################################################

apt:search:
  do: exec
  desc: search for packages
  command: apt search <<package>>
apt:info:
  do: exec
  desc: get info about a package
  command: apt show <<package>>
apt:install:
  do: exec
  desc: install packages on ubuntu
  command: sudo apt -y install <<package>>
apt:remove:
  do: exec
  desc: uninstall packages on ubuntu
  command: sudo apt -y autoremove <<package>>
apt:remove:orphan:
  do: exec
  desc: Remove dependencies that are no longer needed (orphans), because e.g. the package which needed the dependencies was removed.
  command: sudo apt -y autoremove
apt:ls:all:
  do: exec
  desc: list installed apt packages
  command: |
    comm -23 <(apt-mark showmanual | sort -u) <(gzip -dc /var/log/installer/initial-status.gz | sed -n 's/^Package: //p' | sort -u)
apt:update:all:
  do: exec
  desc: update ubuntu. For the sudo-loop, see https://stackoverflow.com/a/30547074/5769446
  command: |
    startsudo() {
      sudo -v
      ( while true; do sudo -v; sleep 50; done; ) &
      SUDO_PID="$!"
      trap stopsudo SIGINT SIGTERM
    }
    stopsudo() {
      kill "$SUDO_PID"
      trap - SIGINT SIGTERM
      sudo -k
    }
    startsudo
    sudo apt -y update
    sudo apt -y upgrade
    stopsudo
apt:clean:
  do: exec
  desc: remove all but 1 past version of cache of installed packages
  command: sudo apt -y clean

# mas ##################################################################################################################

mas:info:
  do: exec
  desc: get info about a package
  command: mas info <<package>>

mas:install:
  do: exec
  desc: install packages
  command: mas install <<package>>

mas:remove:
  do: exec
  desc: uninstall packages
  command: mas uninstall <<package>>

mas:ls:
  do: exec
  desc: list installed packages
  command: mas list

mas:update:
  do: exec
  desc: update a package
  command: mas upgrade <<package>>

mas:update:all:
  do: exec
  desc: update all packages
  command: mas upgrade

# port #################################################################################################################

port:search:
  do: exec
  desc: search for packages
  command: port search <<package>>

port:info:
  do: exec
  desc: get info about a package
  command: port info <<package>>

port:require:
  do: exec
  desc: list dependencies of a package
  command: port deps <<package>>

port:whatrequire:
  do: exec
  desc: list reverse dependencies of a package
  command: port echo depends:<<package>>

port:install:
  do: exec
  desc: install packages
  command: sudo port install <<package>>

port:remove:
  do: exec
  desc: uninstall packages
  command: sudo port uninstall <<package>>

port:remove:orphan:
  do: exec
  desc: remove orphan packages
  command: |
    startsudo() {
      sudo -v
      ( while true; do sudo -v; sleep 50; done; ) &
      SUDO_PID="$!"
      trap stopsudo SIGINT SIGTERM
    }
    stopsudo() {
      kill "$SUDO_PID"
      trap - SIGINT SIGTERM
      sudo -k
    }
    startsudo
    sudo port uninstall rleaves
    sudo port uninstall inactive
    stopsudo

port:ls:
  do: exec
  desc: list installed packages
  command: port installed requested

port:ls:all:
  do: exec
  desc: list all installed packages
  command: port installed

port:ls:available:
  do: exec
  desc: list all available packages
  command: port list

port:update:
  do: exec
  desc: update a package
  command: sudo port upgrade <<package>>

port:update:all:
  do: exec
  desc: update macports. For the sudo-loop, see https://stackoverflow.com/a/30547074/5769446
  command: |
    startsudo() {
      sudo -v
      ( while true; do sudo -v; sleep 50; done; ) &
      SUDO_PID="$!"
      trap stopsudo SIGINT SIGTERM
    }
    stopsudo() {
      kill "$SUDO_PID"
      trap - SIGINT SIGTERM
      sudo -k
    }
    startsudo
    sudo port selfupdate
    sudo port upgrade outdated
    stopsudo

port:clean:
  do: exec
  desc: cleanup macports.
  command: sudo port -f clean --all all

# port specific

port:cutleaves:
  do: exec
  desc: remove orphan packages interactively
  command: sudo port_cutleaves

port:check:x86_64:
  do: exec
  desc: list all macports package that's x86_64
  command: find /opt/local/bin -exec file {} + | grep -A 1 x86_64

# brew #################################################################################################################

brew:search:
  do: exec
  desc: search for packages
  command: brew search <<package>>

brew:info:
  do: exec
  desc: get info about a package
  command: brew info <<package>>

brew:require:
  do: exec
  desc: list dependencies of a package
  command: brew deps --tree <<package>>

brew:whatrequire:
  do: exec
  desc: list reverse dependencies of a package
  command: brew uses --eval-all --recursive <<package>>

brew:install:
  do: exec
  desc: install packages
  command: brew install <<package>>

brew:remove:
  do: exec
  desc: uninstall packages
  command: brew uninstall <<package>>

brew:remove:orphan:
  do: exec
  desc: remove orphan packages
  command: brew autoremove

brew:ls:
  do: exec
  desc: list installed packages
  command: brew leaves

brew:ls:all:
  do: exec
  desc: list all installed packages
  command: brew list

brew:ls:available:
  do: exec
  desc: list all available packages
  command: brew search '*'

brew:ls:repo:
  do: exec
  desc: list all enabled repos
  command: brew tap

brew:update:
  do: exec
  desc: update a package
  command: brew upgrade <<package>>

brew:update:all:
  do: exec
  desc: update all packages with a sudo loop. For the sudo-loop, see https://stackoverflow.com/a/30547074/5769446
  command: |
    startsudo() {
      sudo -v
      ( while true; do sudo -v; sleep 50; done; ) &
      SUDO_PID="$!"
      trap stopsudo SIGINT SIGTERM
    }
    stopsudo() {
      kill "$SUDO_PID"
      trap - SIGINT SIGTERM
      sudo -k
    }
    startsudo
    brew update
    brew upgrade
    stopsudo

brew:clean:
  do: exec
  desc: clean cache
  command: brew cleanup --prune=all -s && rm -rf "$(brew --cache)"

# brew specific

brew:ls:cask:
  do: exec
  desc: list all installed casks
  command: brew list --cask

brew:ls:version:
  do: exec
  desc: list all installed packages with version
  command: brew ls --versions $(brew leaves)

brew:doctor:
  do: exec
  desc: run brew doctor
  command: brew doctor

# pip ##################################################################################################################

pip:info:
  do: exec
  desc: get info about a package. Note that it can only shows packages that are installed.
  command: python -m pip show <<package>>

pip:install:
  do: exec
  desc: install packages
  command: python -m pip install <<package>>

pip:remove:
  do: exec
  desc: uninstall packages
  command: python -m pip uninstall <<package>>

pip:ls:
  do: exec
  desc: list installed packages
  command: python -m pip list --not-required

pip:ls:all:
  do: exec
  desc: list installed packages
  command: python -m pip list

pip:update:
  do: exec
  desc: update a package
  command: python -m pip install -U <<package>>

pip:update:all:
  do: exec
  desc: update all packages
  command: python -m pip install -U -r <(pip freeze | cut -d = -f 1 | cut -d @ -f 1)

pip:clean:
  do: exec
  desc: clean cache
  command: python -m pip cache purge

# pip specific

pip:editable:
  do: exec
  desc: pip install current directory in editable mode
  command: python -m pip install -e . <<args( ,--no-dependencies)>>

# conda ################################################################################################################

conda:search:
  do: exec
  desc: search for packages
  command: mamba repoquery search <<package>>

conda:info:
  do: exec
  desc: get info about a package
  command: mamba search <<package>> --info

conda:require:
  do: exec
  desc: list dependencies of a package
  command: mamba repoquery depends --recursive --all-channels --tree <<package>>

conda:whatrequire:
  do: exec
  desc: list reverse dependencies of a package
  command: mamba repoquery whoneeds --recursive --all-channels --tree <<package>>

conda:install:
  do: exec
  desc: install packages
  command: mamba install <<package>>

conda:remove:
  do: exec
  desc: uninstall packages
  command: mamba remove <<package>>

conda:remove:orphan:
  do: exec
  desc: remove orphan packages. Note that this also update the environments, which is the only way to remove orphan packages. See https://github.com/conda/conda/issues/62#issuecomment-468982110
  command: mamba update --all --prune

conda:ls:
  do: exec
  desc: list installed packages
  command: mamba env export --from-history

conda:ls:all:
  do: exec
  desc: list all installed packages
  command: mamba list

conda:ls:available:
  do: exec
  desc: list all available packages
  command: mamba search

conda:ls:repo:
  do: exec
  desc: list all enabled repos
  command: conda config --show channels

conda:update:
  do: exec
  desc: update current conda environment
  command: mamba update <<package>>

conda:update:all:
  do: exec
  desc: update current conda environment
  command: mamba update --all --prune

conda:clean:
  do: exec
  desc: conda cleanup all
  command: mamba clean --all -y; mamba clean --force-pkgs-dirs -y; mamba build purge

# conda specific

conda:ls:env:
  do: exec
  command: mamba info --envs

conda:batch:
  do: exec
  desc: running a certain command across all conda env.
  command: mamba info --json | jq '.envs[]' | xargs -i -n1 -P1 bash -c '. activate {} && <<command>>'
conda:batch:env:
  do: exec
  desc: running a certain command across all conda env. excluding base
  command: mamba info --json | jq '.envs[]' | grep '/envs/' | xargs -i -n1 -P1 bash -c '. activate {} && <<command>>'
conda:batch:remove:orphan:
  do: exec
  desc: batch remove orphan packages. Note that this also update the environments, which is the only way to remove orphan packages. See https://github.com/conda/conda/issues/62#issuecomment-468982110
  command: s r conda:batch:env 'mamba update --all --prune'
conda:batch:update:all:
  do: exec
  desc: update all conda environments
  command: s r conda:batch 'mamba update --all --prune'
conda:batch:clean:
  do: exec
  desc: clean all conda environments
  command: s r conda:batch 'mamba clean --all -y; mamba clean --force-pkgs-dirs -y; mamba build purge'

# jupyter ##############################################################################################################

jupyter:install:
  do: exec
  desc: install a jupyter lab extension
  command: jupyter labextension install <<extension>>

jupyter:remove:
  do: exec
  desc: remove a jupyter lab extension
  command: jupyter labextension uninstall <<extension>>

jupyter:ls:
  do: exec
  desc: list installed jupyter lab extensions
  command: jupyter labextension list

jupyter:update:all:
  do: exec
  desc: update all packages
  command: jupyter labextension update --all

# jupyter specific

jupyter:ls:env:
  do: exec
  command: jupyter kernelspec list

# go ###################################################################################################################

go:update:all:
  do: exec
  desc: update all go packages
  command: go get -u all

# vscode ###############################################################################################################

code:install:
  do: exec
  desc: install vscode extensions
  command: code --install-extension <<extension>>

code:remove:
  do: exec
  desc: remove vscode extensions
  command: code --uninstall-extension <<extension>>

code:ls:
  do: exec
  desc: list installed vscode extensions
  command: code --list-extensions
