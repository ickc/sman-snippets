pip:update:
  do: exec
  command: pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U
pip:install:
  do: exec
  desc: Always access PyPI with no-cache-dir. This may help if the cache got stuck.
  command: pip install -U --no-cache-dir <<packages>>

jupyter:ls:
  do: exec
  command: jupyter kernelspec list

conda:ls:
  do: exec
  command: conda info --env
conda:batch:
  do: exec
  desc: running a certain command across all conda env. excluding base
  command: conda info --env | grep -v -E '#|base' - | cut -d' ' -f1 | xargs -i -n1 -P1 bash -c ". $(which activate) {} && <<command>>"
conda:batch:ch:
  do: exec
  desc: similar to conda:batch, but restricted to env. with <<channel>> in the name, and install packages from that channel
  command: conda info --env | grep -v -E '#|base' - | grep <<channel(defaults,intel)>> - | cut -d' ' -f1 | xargs -i -n1 -P1 bash -c ". $(which activate) {} && conda install -c <<channel>> <<packages>> -y"
conda:batch:rm:
  do: exec
  desc: remove all conda environments
  command: conda info --env | grep -v -E '#|base' - | cut -d' ' -f1 | xargs -i -n1 -P1 bash -c "$(which conda) remove -n {} --all -y"
conda:batch:rm:inteldefaults:
  do: exec
  desc: remove all intel/defaults environments
  command: conda info --env | grep -v -E '#|base' - | grep -E '(defaults|intel)' - | cut -d' ' -f1 | xargs -i -n1 -P1 bash -c "$(which conda) remove -n {} --all -y"
conda:batch:update:all:
  do: exec
  desc: update all conda environments
  command: mamba info --json | python -c 'import json; import sys; list(map(print, json.load(sys.stdin)["envs"]))' | grep -v '^/Applications' | xargs -n1 mamba update --all -y -p
conda:ch:
  do: exec
  desc: set a highest priority channel
  command: conda config --prepend channels <<channel(defaults,intel)>> && cat ~/.condarc
conda:update:
  do: exec
  desc: update conda
  command: mamba update -n base --all
conda:env:update:
  do: exec
  desc: update current conda environment
  command: mamba update --all
conda:clean:
  do: exec
  desc: conda cleanup all
  command: mamba clean --all -y; mamba clean --force-pkgs-dirs -y; mamba build purge

pip:dev:
  do: exec
  desc: pip install current directory in editable mode
  command: pip install -e .

# macOS brew
brew:update:
  do: exec
  command: (while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &; brew update && brew update && brew upgrade && brew cleanup && brew doctor)
brew:ls:
  do: exec
  command: brew leaves
brew:lsv:
  do: exec
  command: brew ls --versions $(brew leaves)
brew:cleanup:
  do: exec
  desc: force cleanup and clear cache
  command: brew cleanup -s && rm -rf $(brew --cache)
brew:linux:ca:nersc:
  do: exec
  desc: ln ca cert on NERSC
  command: ln -s /etc/ssl/certs ~/.linuxbrew/etc/openssl && ln -s /var/lib/ca-certificates/ca-bundle.pem ~/.linuxbrew/etc/openssl/cert.pem && ~/.linuxbrew/opt/openssl/bin/c_rehash

# go
go:update:
  do: exec
  desc: update all go packages
  command: go get -u all

# jupyter
jupyter:install:
  do: exec
  desc: install a jupyter lab extension
  command: jupyter labextension install <<extension>>
jupyter:update:
  do: exec
  desc: update all packages
  command: jupyter labextension update --all
jupyter:ls:
  do: exec
  desc: list installed jupyter lab extensions
  command: jupyter labextension list

# vscode
code:ls:
  do: exec
  desc: list vscode installed extensions
  command: code --list-extensions 2>/dev/null

xcode:
  do: exec
  desc: install xcode command line tools.
  command: xcode-select --install && sudo xcodebuild -license accept

port:update:
  do: exec
  desc: update macports
  command: (while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &; sudo port selfupdate && sudo port upgrade outdated)
port:cleanup:
  do: exec
  desc: cleanup macports
  command: sudo port -f clean --all all && sudo port -f uninstall inactive
port:cutleaves:
  do: exec
  desc: remove "leaves" in macports
  command: sudo port_cutleaves -b
port:ls:
  do: exec
  desc: list installed packages
  command: port installed
port:check:x86_64:
  do: exec
  desc: list all macports package that's x86_64
  command: find /opt/local/bin -exec file {} + | grep -A 1 x86_64

linux:update:terminal:
  do: exec
  desc: choose the default terminal emulator when Ctrl-Alt-T is pressed.
  command: sudo update-alternatives --config x-terminal-emulator

install:reload-browser:
  do: exec
  desc: install reload-browser for entr
  command: (cd <<prefix(~/.local/bin)>>; wget http://eradman.com/entrproject/scripts/reload-browser; chmod +x reload-browser)

# package managers #####################################################################################################

# command that does a full distro upgrade should not be provided unless it is very standard without manual intervention
# standard commands
# - search: search for packages
# - provide: check what package provides this executables
# - info: get info about a package
# - require: list dependencies of a package
# - whatrequire: list reverse dependencies of a package
# - install: install packages
# - remove: uninstall packages
# - remove:orphan: remove orphan packages
# - ls: list all user-installed packages
# - ls:all: list all installed packages
# - ls:available: list all available packages
# - ls:repo: list all enabled repos  # pacman has no such concept
# - update: update a package  # pacman has no such concept
# - update:all: update all packages
# - clean: clean cache

# see https://wiki.archlinux.org/title/Pacman/Rosetta

# RHEL ################################################################################################################

rhel:search:
  do: exec
  desc: search for packages on RHEL
  command: dnf search <<package>>
rhel:provide:
  do: exec
  desc: check what package provides this executables
  command: dnf provides <<executable>>
rhel:info:
  do: exec
  desc: get info about a package
  command: dnf info <<package>>
rhel:require:
  do: exec
  desc: list dependencies of a package
  command: dnf repoquery --requires <<package>>
rhel:whatrequire:
  do: exec
  desc: list reverse dependencies of a package
  command: dnf repoquery --alldeps --whatrequires <<package>>
rhel:install:
  do: exec
  desc: install packages on RHEL
  command: sudo dnf install <<package>>
rhel:remove:
  do: exec
  desc: uninstall packages on RHEL
  command: sudo dnf remove <<package>>
rhel:remove:orphan:
  do: exec
  desc: remove orphan packages on RHEL
  command: sudo dnf autoremove
rhel:ls:
  do: exec
  desc: list user installed packages on RHEL
  command: dnf history userinstalled
rhel:ls:all:
  do: exec
  desc: list all installed packages on RHEL
  command: dnf list installed
rhel:ls:available:
  do: exec
  desc: list all available packages
  command: dnf list available
rhel:ls:repo:
  do: exec
  desc: list all enabled repos
  command: dnf repolist
rhel:update:
  do: exec
  desc: update a package on RHEL
  command: sudo dnf update <<package>>
rhel:update:all:
  do: exec
  desc: update packages on RHEL
  command: sudo dnf upgrade --refresh
rhel:clean:
  do: exec
  desc: Performs cleanup of temporary files kept for repositories. This includes any such data left behind from disabled or removed repositories as well as for different distribution release versions.
  command: sudo dnf clean all

# RHEL specific

rhel:ls:subscription:
  do: exec
  desc: check if valid RHEL subscription exists
  command: sudo subscription-manager list --installed

# arch #################################################################################################################

arch:search:
  do: exec
  desc: search package (ERE supported)
  command: yay -Ss '<<package>>'
arch:provide:
  do: exec
  desc: check what package provides this executables
  command: yay -Fy && yay -F '<<executable>>'
arch:info:
  do: exec
  desc: get info about a package
  command: yay -Si '<<package>>'
arch:require:
  do: exec
  desc: list dependencies of a package
  command: yay -Si '<<package>>'
arch:whatrequire:
  do: exec
  desc: list reverse dependencies of a package
  command: yay -Sii '<<package>>'
arch:install:
  do: exec
  desc: install packages
  command: yay -S '<<package>>'
arch:remove:
  do: exec
  desc: remove a package using yay
  command: yay -Rs '<<package>>'
arch:remove:orphan:
  do: exec
  desc: removing orphans and their configuration files (run this recursively until none)
  command: yay -Rns $(yay -Qtdq)
arch:ls:
  do: exec
  desc: List all explicitly installed packages
  command: pacman -Qe
arch:ls:all:
  do: exec
  desc: List all installed packages
  command: yay -Q
arch:ls:available:
  do: exec
  desc: List all available packages
  command: yay -Sl
arch:update:all:
  do: exec
  desc: yay upgrade all
  command: yay -Syyu --sudoloop --nomakepkgconf --noanswerclean --noanswerdiff --noansweredit --noanswerupgrade --nocleanmenu --nodiffmenu --noeditmenu --noupgrademenu --norebuild --noredownload --overwrite
arch:clean:
  do: exec
  desc: remove all but 1 past version of cache of installed packages
  command: sudo pacman -Sc && paccache --remove --keep 1

# Arch specific

arch:refresh:mirror:
  do: exec
  desc: refresh pacman mirror list
  command: command -v rate-mirrors >/dev/null 2>&1 && bash -c 'rate-mirrors arch | sudo tee /etc/pacman.d/mirrorlist'
arch:refresh:update:all:
  do: exec
  desc: refresh pacman mirror list and then upgrade
  command: |
    s r arch:refresh:mirror && s r arch:update:all

arch:ls:local:
  do: exec
  desc: List all foreign packages (typically manually downloaded and installed or packages removed from the repositories a.k.a. AUR)
  command: pacman -Qm
arch:ls:native:
  do: exec
  desc: List all explicitly installed native packages (i.e. present in the sync database) that are not direct or optional dependencies
  command: pacman -Qent
arch:ls:native:all:
  do: exec
  desc: List all native packages (installed from the sync database)
  command: pacman -Qn
arch:ls:all:date:
  do: exec
  desc: List installed packages by date
  command: expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort

# apt ##################################################################################################################

apt:search:
  do: exec
  desc: search for packages
  command: apt search <<package>>
apt:info:
  do: exec
  desc: get info about a package
  command: apt show <<package>>
apt:install:
  do: exec
  desc: install packages on ubuntu
  command: sudo apt -y install <<package>>
apt:remove:
  do: exec
  desc: uninstall packages on ubuntu
  command: sudo apt -y autoremove <<package>>
apt:remove:orphan:
  do: exec
  desc: Remove dependencies that are no longer needed (orphans), because e.g. the package which needed the dependencies was removed.
  command: sudo apt -y autoremove
apt:ls:all:
  do: exec
  desc: list installed apt packages
  command: |
    comm -23 <(apt-mark showmanual | sort -u) <(gzip -dc /var/log/installer/initial-status.gz | sed -n 's/^Package: //p' | sort -u)
apt:update:all:
  do: exec
  desc: update ubuntu
  command: (while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &; sudo apt -y update && sudo apt -y upgrade)
apt:clean:
  do: exec
  desc: remove all but 1 past version of cache of installed packages
  command: sudo apt -y clean
