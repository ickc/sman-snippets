# find #########################################################################
find:extension:
  do: exec
  desc: show counts of all extensions inside current directory, if no extension, show name instead. Ignore .git
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f | sed -E 's/^.*([./][^./]+)$/\1/'<<caseSensitivity( , | tr '[:upper:]' '[:lower:]' )>>| sort | uniq -c | sort -n
find:long_extension:
  do: exec
  desc: similar to fd:ext, but treat the first . as the beginning of ext e.g. .tar.gz. No extension is regarded as empty string
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f | sed -E 's/^.*\/[^./]*([^/]*)$/\1/'<<caseSensitivity( , | tr '[:upper:]' '[:lower:]' )>>| sort | uniq -c | sort -n
find:part:extension:
  do: exec
  desc: similar to fd:ext, but ignoring .part
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f | grep -o -E '[./][^./]+\.part$'<<caseSensitivity( , | tr '[:upper:]' '[:lower:]' )>>| sort | uniq -c | sort -n
find:name:
  do: exec
  desc: find a name pattern, show counts of filenames. Ignore .git
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' | sed -E 's/^.*\/([^/]+)$/\1/g' | sort | uniq -c | sort -n
find:unread:
  do: exec
  desc: find unreadable files
  command: find . \! -readable 2> /dev/null
find:git:
  do: exec
  desc: find all git repositories recursively
  command: find . -name '.git' | sed -E 's/^(.*)\/[^/]*$/\1/g'
find:git:level:
  do: exec
  desc: find all git repositories and do a statistics on how depth the levels are
  command: echo "count\tlevel"; find -name '.git' | awk -F/ '{print NF - 2}' | sort | uniq -c | sort -n -k2
find:git:ignored:extension:
  do: exec
  desc: find all git-ignored files and print a stat. on the extensions similar to fd:ext
  command: git status --porcelain=1 --ignored | grep -E "^\!\!" | sed -E 's/^.*([./][^./]+)[/]?$/\1/'<<caseSensitivity( , | tr '[:upper:]' '[:lower:]' )>>| sort | uniq -c | sort -n
find:git:ignored:rm:
  do: exec
  desc: find all git-ignored files and delete them. Note that it is not safe if the pathnames contain special characters
  command: git status --porcelain=1 --ignored | grep -E "^\!\!" | sed 's/^..//g' | xargs -i rm -rf "{}"
find:not:git:level:
  do: exec
  desc: find directories at a level that is not a git repo
  command: find . -maxdepth <<level>> -mindepth <<level>> -type d -exec bash -c '[[ -d "$0/.git" ]] || echo $0' {} \;
find:dir:
  do: exec
  desc: find a name pattern and show counts of the parent directories. Ignore .git
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' | sed -E 's/^(.*)\/[^/]*$/\1/g' | sort | uniq -c | sort -n
find:dir1:
  do: exec
  desc: find a name pattern, and show counts per 1st level sub-directory. Ignore .git
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' | awk -F '/' '{print $2}' | sort | uniq -c | sort -n
find:dir2:
  do: exec
  desc: find a name pattern, and show counts per 2nd level sub-directory. Ignore .git
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' | awk -F '/' '{print $2"/"$3}' | sort | uniq -c | sort -n
find:dir3:
  do: exec
  desc: find a name pattern, and show counts per 3rd level sub-directory. Ignore .git
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' | awk -F '/' '{print $2"/"$3"/"$4}' | sort | uniq -c | sort -n
find:poor:name:
  do: exec
  desc: find poor pathnames
  command: find . -exec bash -c 'for name do [[ "$name" =~ ^[a-zA-Z0-9./_-]*$ ]] || echo $name; done' bash {} +
find:executable:
  do: exec
  desc: Find executables. Ignore .git
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -executable
find:empty:
  do: exec
  desc: find empty files or directories. Ignore .git
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -empty <<options( ,-delete)>>
# aux. files
find:conflict:
  do: exec
  desc: find Dropbox's conflicted copy.
  command: find . \! -path '*/.dropbox.cache/*' -name '*conflicted copy*' <<options( ,-delete)>>
find:ds_store:
  do: exec
  desc: find mac's DS_Store files.
  command: find . \( -name '._.DS_Store' -o -name '.DS_Store' \) <<options( ,-delete)>>
find:macos_hidden_files:rm:
  do: exec
  desc: find mac's auto-created files on external drives and delete them.
  command: find . \( -name '.Trashes' -o -name '.fseventsd' -o -name '.Spotlight-V100' \) -exec sudo rm -rf {} +
find:ncol:
  do: exec
  desc: find number of columns for files with given pattern.
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' -exec awk '{print NF}' {} + | sort -nu
find:cat:all:
  do: exec
  desc: find files of a name pattern and cat all
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' -exec <<options(cat,less)>> {} +
find:cat:dir:
  do: exec
  desc: find files with extension in directories at a certain level and cat & sort together into a file with the same extension besides the directories.
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -mindepth <<level>> -maxdepth <<level>> -type d -exec bash -c 'find $0 -name "*.<<extension>>" | xargs cat | sort > $0.<<extension>>' {} \;
find:grep:
  do: exec
  desc: find files of a name pattern and grep another pattern from them
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' -exec grep --color=auto -HnE <<args(-A 10, )>> '<<pattern>>' {} +
find:grep:match:
  do: exec
  desc: find files of a name pattern and grep another pattern from them, show match only, unique.
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' -exec grep -ho '<<pattern>>' {} + | sort -u
find:grep:time:ram:
  do: exec
  desc: assume <<pattern>> finds output of GNU time, get the row of max. mem. used, cut and sort by the numbers.
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' -exec gre --color=autop -h 'Maximum resident set size' {} + | cut -d' ' -f 6 | sort -n
find:grep:time:
  do: exec
  desc: assume <<pattern>> finds output of GNU time, get the row of time used, cut and sort by the time.
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' -exec grep --color=auto -h 'Elapsed (wall clock) time' {} + | cut -d' ' -f 8 | sort -V
# file stat
find:size:
  do: exec
  desc: find files with a name pattern and print its size
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' -printf "%kKB %p\n" | sort -h
# text processing
find:level:sed:
  do: exec
  desc: find files with a name pattern at a certain level and run inplace sed substitution on it.
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -maxdepth <<level>> -mindepth <<level>> -name "<<name>>" -exec sed -i 's/<<from>>/<<to>>/g' {} +
find:py:def:
  do: exec
  desc: find all function definitions in *.py files and print the freq. per function name
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '*.py' -exec grep -ohE 'def[ ]+([^(]+)\(' {} + | sort | uniq -c | sort -n
find:sed:linefeed:
  do: exec
  desc: Convert carriage return (e.g. from Windows) to line feed
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '<<name>>' -exec sed -i -e 's/\r\n/\n/g' -e 's/\r/\n/g' {} +
find:md5sum:
  do: exec
  desc: save md5sum of all files into md5sum.txt
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f \! -name 'md5sum.txt' -exec md5sum {} + | sort > md5sum.txt
find:check:md5sum:
  do: exec
  desc: find all md5sum.txt and enter its directory to check all files
  command: find -name 'md5sum.txt' -exec bash -c 'cd ${0%/*}; md5sum -c md5sum.txt' {} \;
find:tar:xz:extension:
  do: exec
  desc: find files with a name pattern and compress them as .tar.xz with level 9
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -name '*.<<ext>>' | XZ_OPT=-9 tar -cJf $(basename $(pwd)).<<ext>>.tar.xz -T -
find:tar:xz:txt:
  do: exec
  desc: find text files with a predefined name pattern and compress them as .txt.tar.xz with level e9
  command: find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f -regextype posix-egrep -regex ".*/.*(-stdout_[[:digit:]]*|-stderr_[[:digit:]]*|makefile|.txt|.err|.csv|.out|.time|.in)" | XZ_OPT=-e9 tar -cJf $(basename $(pwd)).txt.tar.xz -T -
find:make:clean:
  do: exec
  desc: find all makefiles in any sub-directories and run 'make clean'
  #  && make clean && cd -
  command: find . -type f \( -name GNUmakefile -o -name makefile -o -name Makefile \) -exec bash -c 'for makefile do cd "${makefile%/*}"; make -f "${makefile##*/}" clean; cd -; done' bash {} +
find:mv:
  do: exec
  desc: mv files under current directory into directories named after its extensions
  command: find -maxdepth 1 -type f -exec bash -c 'dir="${0##*.}"; mkdir -p "$dir"; mv "$0" "$dir"' {} \;
find:open:image:
  do: exec
  desc: find all images and open it. By default on macOS it will all be opened in one single Preview window.
  command: |
    find . <<ignorePath( ,\! -path '*/.git/*',\! -path '*/.*/*')>> -type f \( \
      -iname '*.tiff' \
      -o -iname '*.gif' \
      -o -iname '*.png' \
      -o -iname '*.jpeg' \
      -o -iname '*.jpg' \
      -o -iname '*.pdf' \
    \) -exec open {} +
find:mv:subdir:
  do: exec
  desc: find all files in current directory and move them into a subdirectory with the same name without extension
  command: |
    find . -mindepth 1 -maxdepth 1 -type f -exec bash -c '
      for file do
        dir="${file%.*}"
        mkdir -p "$dir"
        mv "$file" "$dir/$file"
      done' bash {} +
find:symlink:broken:
  do: exec
  desc: find broken symlink
  command: find . -xtype l

# grep #########################################################################
grep:
  do: exec
  desc: grep a pattern under current dir.
  command: grep --color=auto -irHn '<<pattern>>' .
grep:email:
  do: exec
  desc: grep all email patterns from file
  command: grep -EiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' '<<filename>>'
grep:taskpaper:tag:
  do: exec
  desc: show all unique tags in TaskPaper format.
  command: grep -o '@[^( ]\+' '<<filename#taskpaper file>>' | sort -u

# tar ##########################################################################

# file archive
untar:
  do: exec
  desc: untar a file, can be compressed, to a dir
  command: mkdir <<dir>>; tar -xf <<filename>> -C <<dir>>
tar:ls:
  do: exec
  desc: list the content of a tar file, can be compressed
  command: tar -tf <<filename>>
tar:gz:
  do: exec
  desc: tar and gzip a dir
  command: tar -czf <<dirname>>.tar.gz <<dirname>>
tar:xz:
  do: exec
  desc: tar and xz a dir
  command: XZ_OPT=-<<level(e9)>> tar -cJf <<dirname>>.tar.xz <<dirname>>

################################################################################

du:
  do: exec
  desc: show sizes of everything up to a certain level using du.
  command: du -h -d <<level>> . | sort -h
# file indexing
create:locate_db:
  do: exec
  desc: create locate.db
  command: slocate --database=~/.locate.db
update:locate_db:
  do: exec
  desc: update locate.db
  command: updatedb --require-visibility 0 -o ~/.locate.db
sort:max:
  do: exec
  desc: ignore header and show maximum. Assume file is something like a CSV with one row header and first column to be sorted.
  command: tail -n +2 <<filename>> | sort -n | tail -n1

# ACLs
ls:group:
  do: exec
  desc: List users in a group name
  command: lid -g <<group>>
chgrp:
  do: exec
  desc: Change group and add sticky bit recursively
  command: chgrp -R <<group name>> . && chmod -R g+s .
permission:
  do: exec
  desc: recursively change ownership, add SetGID, etc.
  command: <<sudo( ,sudo)>> chown -R <<user(kolen,khcheung)>> . && <<sudo>> chgrp -R <<group(kolen,khcheung,polar)>> . && find . -type d -exec <<sudo>> chmod <<permDir(2750,2755)>> {} + && find . -type f -exec <<sudo>> chmod <<permFile(640,644)>> {} +
permission:group:
  do: exec
  desc: change group recursively, add setgid & sticky bit for directories, and make group-readable recursively.
  command: <<sudo( ,sudo)>> chgrp -R <<group(kolen,khcheung,polar)>> . && find . -type d -exec <<sudo>> chmod g+s {} + -exec <<sudo>> chmod +t {} + && chmod -R g+r .
permission:group:by:user:
  do: exec
  desc: For those owned by $USER, change group recursively, add setgid & sticky bit for directories, and make group-readable recursively.
  command: find . -user "$USER" -exec chgrp -R <<group(kolen,khcheung,polar)>> {} + && find . -user "$USER" -type d -exec chmod g+s {} + -exec chmod +t {} + && find . -user "$USER" -exec chmod g+r {} +
# File systems
df:
  do: exec
  desc: List file system mount points
  command: df -Th
write_test:
  do: exec
  desc: perform write test at 1G/512. test1.img and test2.img will be written temporarily.
  command: dd if=/dev/zero of=test1.img bs=1G count=1 oflag=dsync && dd if=/dev/zero of=test2.img bs=512 count=1000 oflag=dsync && rm test1.img test2.img

# wget #########################################################################
download:all:
  do: exec
  desc: download all from the URL using wget
  command: wget -mke robots=off <<URL>>
download:level:
  do: exec
  desc: download up to a certian level from the URL using wget
  command: wget -r -l <<level>> --no-remove-listing -ke robots=off <<URL>>
wget:untar:
  do: exec
  command: wget -qO- '<<URL>>' | tar -xzf -
wget:unzip:
  do: exec
  desc: wget and unzip a zip file, on macOS only.
  command: wget -qO- '<<URL>>' | bsdtar -xf-

# gs ###########################################################################

gs:merge:
  do: exec
  desc: use ghostscript to merge PDFs
  command: gs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOutputFile="<<output>>" -f *.pdf
gs:extract:
  do: exec
  desc: use ghostscript to extract page range from PDF
  command: gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dFirstPage=<<first>> -dLastPage=<<last>> -sOutputFile='<<output>>' '<<input>>'

# misc #########################################################################
openconnect:
  do: exec
  command: until sudo openconnect ucbvpn.berkeley.edu; do sleep 2; done
pkill:
  do: exec
  desc: kill all process of current user
  command: pkill -u $USER
samba:
  do: exec
  desc: connect to samba on router
  command: sudo mount -t cifs -o username=${USER},uid=$(id -u),gid=$(id -g) //<<server>>/<<name>> <<mountPoint>>
samba:reload:
  do: exec
  desc: reload samba conf
  command: sudo smbcontrol all reload-config

# disks
badblocks:
  do: exec
  desc: check badblocks of a device. n for non-destructive read/write, w for write
  command: sudo badblocks -<<destructive(n,w)>>vsb 4096 /dev/<<disk>>
info:smart:
  do: exec
  command: sudo smartctl -x /dev/<<disk>>
info:hdparm:
  do: exec
  command: sudo hdparm -I /dev/<<disk>>

# PATH
path:print:
  do: exec
  desc: pretty-print PATH
  command: echo $<<var(PATH,LD_LIBRARY_PATH)>> | tr ':' '\n'
path:statistics:
  do: exec
  desc: print stat of PATH, useful for inspecting duplicated paths
  command: echo $PATH | tr ':' '\n' | sort | uniq -c | sort -n

redirect:
  do: exec
  desc: redirect stdout, stderr seperately while also print to terminal
  command: |
    {{<<command>> <<outfile>>} > >(tee <<outfile>>.out)} 2> >(tee <<outfile>>.err)

find:pandoc:
  do: exec
  desc: find and run pandoc
  command: find -name '<<pattern>>' -exec bash -c 'pandoc -s -o "${0%.*}.<<ext>>" "$0" <<args>>' {} \;

# IP related

ip:public:
  do: exec
  desc: check public IP (even if it is behind another router). See https://www.linuxtrainingacademy.com/determine-public-ip-address-command-line-curl/
  command: curl <<url(ipecho.net/plain,http://checkip.amazonaws.com)>>

ip:local:
  do: exec
  desc: get all local IP addresses
  command: python3 -c 'import socket, psutil; [print(interface.ljust(10), snic.address.rjust(15)) for interface, snics in psutil.net_if_addrs().items() for snic in snics if snic.family == socket.AF_INET]'

ip:local:router:
  do: exec
  desc: get local IP address to router
  command: if [[ $(uname) == Darwin ]]; then hostname -i; else (ip route get 1.1.1.1 | grep 1.1.1.1 | awk '{print $7}'); fi

ip:router:
  do: exec
  desc: get router IP address
  command: if [[ $(uname) == Darwin ]]; then (route -n get default | grep gateway | awk '{print $2}'); else (ip r | grep default | awk '{print $3}'); fi

ip:network:
  do: exec
  desc: get all networks connected to. e.g. 192.168.1.0/24
  command: if [[ $(uname) == Darwin ]]; then (netstat -nr | awk '{print $1}' | grep -E '^[0-9a-f:.]+/[0-9]+$' | sort -u); else (ip r | grep -v default | awk '{print $1}'); fi

ip:list:network:
  do: exec
  desc: 'list all IP within a connected network. Hint: use ip:network to find out the network first.'
  command: sudo nmap -sn <<network>>

ip:mac_address:
  do: exec
  desc: get mac address
  command: if [[ $(uname) == Darwin ]]; then networksetup -listallhardwareports; else ip link show; fi

pdfimages:
  do: exec
  desc: extract original images from PDF
  command: pdfimages -all -p <<input>> <<outputPrefix>>

server:
  do: exec
  desc: serve current directory
  command: python3 -m http.server <<port>> <<local( ,--bind 127.0.0.1)>>

# iperf test network
iperf:s:
  do: exec
  desc: testing network performance. Start iperf server listening...
  command: iperf3 -s
iperf:c:
  do: exec
  desc: testing network performance. Start iperf client connecting...
  command: iperf3 -c <<ip>> -l <<size(64,128,256)>>K -w <<size>>K

bit:
  do: exec
  desc: show OS 64bit or 32bit
  command: getconf LONG_BIT

zcompdump:rebuild:
  do: exec
  desc: rebuild .zcompdump after installing new zsh completions
  command: rm -f ~/.zcompdump; compinit

texcount:md:
  do: exec
  desc: texcount summary info on markdown files using texcount_processing from dautil-py
  command: texcount_processing <(pandoc '<<file>>' -s -t latex | texcount -relaxed -)

directory:summary:
  do: exec
  desc: In a file with multiple lines of paths, count the occurence of parents at certain level.
  command: cut -d/ -f-<<level>> <<file>> | sort | uniq -c | sort -n

directory:grep:summary:
  do: exec
  desc: similar to directory summary, but filtered by a grep-ing a parent directory first.
  command: grep '^<<parent>>/' <<file>> | cut -d/ -f-<<level>> | sort | uniq -c | sort -n

batch:convert:
  do: exec
  desc: batch running a filter command from one file to another with a different parent and extension. Hint—cd into the directory containing the files first!
  command: |
    mkdir -p '../<<parent>>';
    find . -name '*.<<ext>>' -exec bash -c '
      for file do
      <<echo(echo, )>> <<command>> <<flagsBefore>> "$file" <<flagsAfter>> > "../<<parent>>/${file%.<<ext>>}.<<outExt>>"
      done
    ' bash {} +
