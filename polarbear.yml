# Set environments #############################################################

env:aben:
  do: exec
  desc: run env.sh
  command: . abenv.sh <<flags>>

# set PATH
env:func:bin:
  do: exec
  desc: prepend PATH in a directory with bin
  command: export PATH="<<dir>>/bin:$PATH"
env:dautil-py:
  do: exec
  desc: lazy install dautil-py's bin
  command: if [[ -n $NERSC_HOST ]]; then s r env:func:bin "$PBCOMMON/AnalysisBackend/dautil-py"; else s r env:func:bin "$HOME/git/source/dautil-py"; fi
env:abx:
  do: exec
  desc: lazy install abx's bin
  command: if [[ -n $NERSC_HOST ]]; then s r env:func:bin "$PBCOMMON/AnalysisBackend/AnalysisBackend-Extras-ickc"; else s r env:func:bin "$HOME/git/cmb-polarbear_private/AnalysisBackend-Extras-ickc"; fi
env:dautil-sh:
  do: exec
  desc: lazy install dautil-sh
  command: if [[ -n $NERSC_HOST ]]; then s r env:func:bin "$PBCOMMON/AnalysisBackend/dautil-sh"; else s r env:func:bin "$HOME/git/source/dautil-sh"; fi
env:ab2:
  do: exec
  desc: lazy install ab2's bin
  command: if [[ -n $NERSC_HOST ]]; then s r env:func:bin "$PBCOMMON/AnalysisBackend/ab2"; else s r env:func:bin "$HOME/git/private/ab2"; fi
env:pbbin:
  do: exec
  desc: lazy install everything related to AnalysisBackend
  command: s r env:dautil-sh; s r env:dautil-py; s r env:abx; s r env:ab2

# staging ######################################################################

# on NERSC

stage:aben:
  do: exec
  desc: stage abenv.sh to common. This should be invoked manually after testing it works.
  command: rsync -av --stats ~/git/cmb-polarbear_private/AnalysisBackend-Extras-ickc/bin/abenv.sh "$PBCOMMON/local/bin/"

stage:dautil-py:
  do: exec
  desc: (routine) install dautil-py/bin from git to common on NERSC.
  command: rsync -avm --delete --stats --cvs-exclude --exclude='.DS_Store' --exclude .git/ --exclude .gitignore "$HOME/git/source/dautil-py/bin/" "$PBCOMMON/AnalysisBackend/dautil-py/bin/"
stage:dautil-sh:
  do: exec
  desc: (routine) install dautil-sh/bin from git to common on NERSC.
  command: rsync -avm --delete --stats --cvs-exclude --exclude='.DS_Store' --exclude .git/ --exclude .gitignore "$HOME/git/source/dautil-sh/bin/" "$PBCOMMON/AnalysisBackend/dautil-sh/bin/"
stage:abx:
  do: exec
  desc: (routine) install abx/bin from git to common on NERSC.
  command: rsync -avm --delete --stats --cvs-exclude --exclude='.DS_Store' --exclude .git/ --exclude .gitignore "$HOME/git/cmb-polarbear_private/AnalysisBackend-Extras-ickc/bin/" "$PBCOMMON/AnalysisBackend/AnalysisBackend-Extras-ickc/bin/"
stage:ab2:
  do: exec
  desc: (routine) install ab2/bin from git to common on NERSC.
  command: rsync -avm --delete --stats --cvs-exclude --exclude='.DS_Store' --exclude .git/ --exclude .gitignore "$HOME/git/private/ab2/bin/" "$PBCOMMON/AnalysisBackend/ab2/bin/"

stage:ab:
  do: exec
  desc: (routine) stage AnalysisBackend from git to common on NERSC.
  command: (. abenv.sh -pm cray -b khcheung -n 20190308-ab; s r env:abx && rsync-AnalysisBackend.sh)

stage:analysis_data:
  do: exec
  desc: (routine) stage analysis_data from SCRATCH to common on NERSC.
  command: rsync -av --stats /global/project/projectdirs/polar/data/largepatch4/analysis_data_iota/ $PBCOMMON/AnalysisBackend/analysis_data_iota/
stage:ChileData:
  do: exec
  desc: (routine) stage analysis_data from SCRATCH to common on NERSC.
  command: rsync -av --stats $SCRATCH/data/ChileData/ $PBCOMMON/AnalysisBackend/ChileData/

stage:neofetch:
  do: exec
  desc: install neofetch on NERSC common
  command: cd ~/git/clone/neofetch && make install PREFIX=/global/common/software/polar/local

stage:all:
  do: exec
  desc: (routine) run all stage scripts above
  command: s r stage:dautil-py; s r stage:dautil-sh; s r stage:abx; s r stage:ab2; s r stage:ab; s r stage:analysis_data; s r stage:ChileData; s r stage:neofetch; ~/git/cmb-polarbear_private/AnalysisBackend-Extras-ickc/bin/pbstage.sh

# clone ########################################################################

clone:ab:
  do: exec
  desc: clone AnalysisBackend in ~/git/POLARBEAR
  command: dir="$HOME/git/POLARBEAR"; mkdir -p "$dir"; cd "$dir" && git clone khcheung@bolowiki.berkeley.edu:/pbrepo/AnalysisBackend.git

# mirror #######################################################################

bolo2gh:
  do: exec
  desc: (routine) mirror bolowiki to github on bolowiki
  command: ssh -t khcheung@bolowiki.berkeley.edu 'cd /home/khcheung/git/source/bolo2github && git pull && make mirror-github'
bb2gh:
  do: exec
  desc: (routine) mirror bitbucket to github on lpc
  command: sudo mkdir -p /mnt/tmpfs && sudo mount -o size=2G -t tmpfs none /mnt/tmpfs && cd ~/git/source/bolo2github && git pull && make mirror-bitbucket; sudo umount /mnt/tmpfs

# stats ########################################################################

map:stat:real:
  do: exec
  desc: Count the number of files with name realmap.hdf5.
  command: find . -name 'realmap.hdf5' | wc -l
map:stat:sim:
  do: exec
  desc: Count the number of files with pattern sim(0-9){3}.hdf5.
  command: for num in $(seq -w 000 <<nreal(007)>>); do filename="sim$num.hdf5"; printf "%s\t" "$filename"; find -name "$filename" | wc -l; done
# coadd
coadd:stat:sim:
  do: exec
  desc: Count the number of files with pattern sim(0-9){3}*.hdf5.
  command: for num in $(seq -w 000 <<nreal(007)>>); do filename="sim${num}*.hdf5"; printf "%s\t" "$filename"; find -name "$filename" | wc -l; done
coadd:stat:
  do: exec
  desc: Count no. of coadded files.
  command: find . -type f -regextype posix-egrep -regex '.*/[0-9]{8}_[0-9]{6}/coadd/[^/]*.hdf5' | wc -l
coadd:stat:obs:
  do: exec
  desc: Count no. of coadded observations
  command: find . -type d -regextype posix-egrep -regex '.*/[0-9]{8}_[0-9]{6}/coadd' | wc -l

# deleting corrupted files #####################################################

h5:rm:
  do: exec
  desc: delete corrupted hdf5 files. TODO update arg
  command: find . -name '*.hdf5' -exec h5delete.py -p 64 {} +
h5:rm:coadd:
  do: exec
  desc: delete corrupted hdf5 files under coadd. TODO update arg
  command: find . -path '*/coadd/*' -name '*.hdf5' -exec h5delete.py -p 64 {} +

# null2full directory renaming #################################################

rename:null2full:
  do: exec
  desc: find all level 1 dir start with null_* and rename them as full_*
  command: find . -mindepth 1 -maxdepth 1 -type d -name 'null_*' | sed 's/^\.\/null_\(.*\)$/mv null_\1 full_\1/g' | xargs -i -n1 -P0 bash -c '$0' {}
rename:full2null:
  do: exec
  desc: find all level 1 dir start with full_* and rename them as null_*
  command: find . -mindepth 1 -maxdepth 1 -type d -name 'full_*' | sed 's/^\.\/full_\(.*\)$/mv full_\1 null_\1/g' | xargs -i -n1 -P0 bash -c '$0' {}

# obsolete #####################################################################

pfw:jobid:
  do: exec
  desc: Get job ID from the stdout filenames. Assume using process_field_whwp.py with file pattern 'job_*-stdout*'.
  command: find . -name 'job_*-stdout*' | sed -E 's/^\.\/job_([0-9]+)-stdout_.*$/\1/g' | sort -un
pfw:sed:time:
  do: exec
  desc: Replace the time function from the output of process_field_whwp.py to use the time command with output.
  command: sed -i 's/^time \(.\+\) -o \([^ ]\+\) /command time -v -o \2\/time.txt \1 -o \2 /g' <<filename>>
